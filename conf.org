
* default

** Melpa
#+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives
		 '(
		   ("melpa"."http://melpa.org/packages/")
		   ("elpy"."http://jorgenschaefer.github.io/packages/")
		   )
		 )
#+END_SRC
** UI
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (display-time-mode 1)
  (global-display-line-numbers-mode t)
#+END_SRC

** writing
*** encode
#+BEGIN_SRC emacs-lisp
  ;;set CJK coding/encoding for Chinese/Korean/Japanese characters
  (setq utf-translate-cjk-mode nil)
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)

  ;; set the default encoding system
  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; backwards compatibility as default-buffer-file-coding-system
  (if (boundp buffer-file-coding-system)
      (setq buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))


#+END_SRC
*** warp line
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
** better
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq ring-bell-function 'ignore)

  (setq scroll-conservatively 100)

  (global-subword-mode 1)

  (when window-system
    (global-prettify-symbols-mode t))
#+END_SRC

** themes
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :defer t)

  (use-package color-theme
    :ensure t
    :defer t)

  (use-package zenburn-theme
    :ensure t
    :defer t)

  (use-package solarized-theme
    :ensure t
    :defer t)

  (use-package spacemacs-theme
    :ensure
    :defer t)

  (use-package helm-themes
    :ensure
    :defer t)


  (use-package leuven-theme
    :ensure
    :defer t)


  (use-package dracula-theme
    :ensure
    :defer t)

  (use-package sublime-themes
    :ensure
    :defer t)

  (use-package exotica-theme
    :ensure
    :defer t)

  (use-package sunny-day-theme
    :ensure
    :defer t)

  (use-package professional-theme
    :ensure
    :defer t)

  (use-package light-soap-theme
    :ensure
    :defer t)

  (use-package jbeans-theme
    :ensure
    :defer t)

  (use-package srcery-theme
    :ensure
    :defer t)







#+END_SRC
* org

** elisp temppalte

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el"  "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :defer t
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** src-window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** short-key
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c a") 'org-agenda)
   (global-set-key (kbd "C-c c") 'org-capture)
 #+END_SRC
** agendafiles
 #+BEGIN_SRC emacs-lisp
   (org-agenda-files
    (quote
     ("~/Documents/agendafiles/mywork.org"
      "~/Documents/agendafiles/mylife.org"
      )))
 #+END_SRC
** capture
 #+BEGIN_SRC emacs-lisp
   (setq org-capture-templates '())

   (add-to-list 'org-capture-templates
		'("w" "Work items"))

   (add-to-list 'org-capture-templates
		'("wt" "to do item" entry
		  (file+headline "~/Documents/agendafiles/mywork.org" "Capture items")
		  ))

   (add-to-list 'org-capture-templates
		'("p" "Private items"))

   (add-to-list 'org-capture-templates
		'("pt" "to do item" entry
		  (file+headline "~/Documents/agendafiles/mylife.org" "Capture items")
		  (file "~/Documents/agendafiles/lx-todo.txt") :enpty-lines-before 1
		  ))

   (add-to-list 'org-capture-templates
		'("pl" "p-links" entry
		  (file+headline "~/Documents/agendafiles/mylife.org" "P-links")
		  "* %? %^L "
		  ))


   (add-to-list 'org-capture-templates
		'("pb" "Books" entry
		  (file+headline "~/Documents/agendafiles/mylife.org" "Books")
		  (file "~/Documents/agendafiles/lx-book.txt") 
		  ))
 #+END_SRC
** refile function
 #+BEGIN_SRC emacs-lisp
   (custom-set-variables
    '(org-agenda-files
      (quote
       ("~/Documents/agendafiles/mywork.org"
        "~/Documents/agendafiles/mylife.org"
        )))
    '(org-log-reschedule (quote notes))
    '(org-refile-allow-creating-parent-nodes (quote confirm))
    '(org-refile-targets (quote
                          ((org-agenda-files  :level . 1))))
    '(org-refile-use-outline-path (quote file)))

 #+END_SRC
** 

* latex
** auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :diminish
    :defer t
    :ensure t
    :init
    (setq-default TeX-engine 'xetex)
    :config 
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query nil)
    )
#+END_SRC
** cdlatex
#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :ensure t
  ;;  :diminish
  ;;  :defer t
    :config
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
    (add-hook 'LaTeX-mode-hook 'turn-on-org-cdlatex)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    )
#+END_SRC
** RefTex
** auto-fill-mode
#+BEGIN_SRC emacs-lisp
  ;;(turn-off-auto-fill)
  ;;(remove-hook 'org-mode-hook 'turn-on-auto-fill)
  ;;(remove-hook 'text-mode-hook 'turn-on-auto-fill)
  ;;(remove-hook 'cdlatex-mode-hook 'turn-on-auto-fill)
  ;;(remove-hook 'auctex-mode-hook 'turn-on-auto-fill)
  ;;(remove-hook 'org-cdlatex-mode-hook 'turn-on-auto-fill)
  ;;(remove-hook 'tex-mode-hook 'turn-on-auto-fill)
  ;;(remove-hook 'tex-mode-hook 'turn-on-auto-fill)

  (add-hook 'org-mode-hook 'turn-off-auto-fill)
  (add-hook 'text-mode-hook 'turn-off-auto-fill)
  (add-hook 'tex-mode-hook 'turn-off-auto-fill)
  (turn-off-auto-fill)

  ;;(auto-fill-mode -1)
#+END_SRC
** COMMENT pdfviewer
#+BEGIN_SRC emacs-lisp
  (add-to-list 'TeX-view-program-list
	       '("Zathura"
		 ("zathura "
		  (mode-io-correlate " --synctex-forward %n:0:%b -x \"emacsclient +%{line} %{input}\" ")
		  " %o")
		 "zathura"))
  (add-to-list 'TeX-view-program-selection
	       '(output-pdf "Zathura"))
#+END_SRC
* terminal

** ansi-term
 #+BEGIN_SRC emacs-lisp
   (defvar my-term-shell "/bin/zsh")
   (defadvice ansi-term (before force-bash)
     (interactive (list my-term-shell)))
   (ad-activate 'ansi-term)
 #+END_SRC
** 

* some useful packages

** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :defer t)



#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish
    )

  (add-hook 'after-init-hook 'global-company-mode)
  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'tex-mode 'company-mode)
  (bind-key "<C-tab>" 'company-manual-begin)

  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous)
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish
    :defer t
    :init
    (beacon-mode 1))
#+END_SRC
** excute path
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :diminish
    :defer t
    :config
    (when (memq window-system '(mac ns x))
	 (exec-path-from-shell-initialize)))
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :diminish
    :defer t
    :bind
    (
     ("M-s" . avy-goto-char)
     ))
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :diminish
    :defer t
    :bind
    ("C-s" . swiper))
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish
  ;;  :defer t
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      ))
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
  )

#+END_SRC
** COMMENT neotree
** kill-ring
#+BEGIN_SRC emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :diminish
       :defer t
       :bind ("M-y" . popup-kill-ring))
#+END_SRC
** htmlize
 #+BEGIN_SRC emacs-lisp
   (use-package htmlize
     :ensure t
     :diminish
     :defer t)

 #+END_SRC
** recentf
 #+BEGIN_SRC emacs-lisp
   (use-package recentf
     :diminish
     :config
     (progn
       (setq recentf-max-saved-items 200
	     recentf-max-menu-items 15)
       (recentf-mode)
       ))

   (global-set-key (kbd "C-x C-r") 'recentf-open-files)
 #+END_SRC
** ido
 #+BEGIN_SRC emacs-lisp
   ;; enable ido mode
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-buffer 'always)
   (setq ido-everywhere t)
   (ido-mode 1)


   (use-package ido-vertical-mode
     :ensure t
     :diminish
     :defer t
     :init
     (ido-vertical-mode 1))
   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
 
 #+END_SRC
** smex
 #+BEGIN_SRC emacs-lisp
   (use-package smex
     :ensure t
     :diminish
     :defer t
     :init (smex-initialize)
     :bind
     ("M-x" . smex))
 #+END_SRC
** rainbow
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
     :ensure t
     :diminish
     :defer t
     :init (rainbow-mode 1))

   (use-package rainbow-delimiters
     :ensure t
     :diminish
     :defer t
     :init
     (rainbow-delimiters-mode 1))
 #+END_SRC
** which-key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :diminish
     :defer t
     :config
     (which-key-mode))
 #+END_SRC
** hungry-delete
 #+BEGIN_SRC emacs-lisp
   (use-package hungry-delete
     :ensure t
     :diminish
     :defer t
     :config
     (global-hungry-delete-mode))
 #+END_SRC
** buffers
 #+BEGIN_SRC emacs-lisp
   (defun kill-curr-buffer ()
     (interactive)
     (kill-buffer (current-buffer)))

   (global-set-key (kbd "C-x k") 'kill-curr-buffer)

   (global-set-key (kbd "C-x b") 'ibuffer)


   (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
 #+END_SRC
** windows
 #+BEGIN_SRC emacs-lisp
   (use-package switch-window
     :ensure t
     :diminish
     :defer t
     :config
     (setq switch-window-input-style 'minibuffer)
     (setq switch-window-increase 4)
     (setq switch-window-threshold 2)
     (setq switch-window-shortcut-style 'qwerty)
     (setq switch-window-qwerty-shortcuts
	   '("a" "s" "d" "f" "j" "k" "l"))
     :bind
     ([remap other-window] . switch-window))
 #+END_SRC
** sudo edit
 #+BEGIN_SRC emacs-lisp
   (use-package sudo-edit
     :ensure t
     :diminish
     :defer t
     :bind
     ("C-c e" . sudo-edit))
 #+END_SRC
** flyspell
 #+BEGIN_SRC emacs-lisp
   (use-package flyspell
     :ensure t
     ;;     :diminish
     :config
     (progn
       (setq ispell-program-name "aspell")
       (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))

       (add-hook 'text-mode-hook 'turn-on-auto-fill)
       (add-hook 'gfm-mode-hook 'flyspell-mode)
       (add-hook 'org-mode-hook 'flyspell-mode)
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
       (add-hook 'git-commit-mode-hook 'flyspell-mode)
       (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
       ))



   (use-package flyspell-correct-avy-menu
     :bind 
     ("C-M-;" . flyspell-correct-wrapper)
   ;;  ("C-c cn" . flyspell-correct-next)
   ;;  ("C-c cp" . flyspell-correct-previous)
   ;;  ("C-c ci" . flyspell-correct-at-points)
     :init
     (setq flyspell-correct-interface 'flyspell-correct-avy-menu))

   ; M-o more options
 #+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :diminish
    :defer t
    :config
    (set sml/theme 'light)
    (add-hook 'after-init-hook 'sml/setup))
#+END_SRC
** COMMENT Chinese-input

* my-functions
*** conf.org
 #+BEGIN_SRC emacs-lisp
   (defun open-my-init-file ()
     (interactive)
     (find-file "~/.emacs.d/conf.org"))

   (global-set-key (kbd "<f2>") 'open-my-init-file)

   (defun reload-my-init-file ()
     (interactive)
     (org-babel-load-file "~/.emacs.d/conf.org"))

   (global-set-key (kbd "<f5>") 'reload-my-init-file)
 #+END_SRC
*** max fullscreen
 #+BEGIN_SRC emacs-lisp
   (defun my-fullscreen ()
     (interactive)
     (set-frame-parameter nil 'fullscreen
			  (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))

   (global-set-key (kbd "<f3>")  'my-fullscreen)
 #+END_SRC
*** window split function
 #+BEGIN_SRC emacs-lisp
   (defun split-follow-horizontally ()
     (interactive)
     (split-window-below)
     (balance-windows)
     (other-window 1))

   (defun split-follow-vertically ()
     (interactive)
     (split-window-right)
     (balance-windows)
     (other-window 1))

   (global-set-key (kbd "C-x 2") 'split-follow-horizontally)
   (global-set-key (kbd "C-x 3") 'split-follow-vertically)
 #+END_SRC
*** kill-whole-word
 #+BEGIN_SRC emacs-lisp
   (defun kill-whole-word ()
     (interactive)
     (backward-word)
     (kill-word 1))

   (global-set-key (kbd "C-c k k") 'kill-whole-word)
 #+END_SRC
 
* python

** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC
** check
** yasnippet
** 
* custom-file
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom-file.el")
  (load custom-file)
#+END_SRC





